//@ts-check
let frameBufferArr = `<pre>
/**Auto generated by Monochromer. Don't edit by hand**/

//CONDITIONAL COMPILATION DEFINITIONS
#define RESOLUTION_640x480
#define PALETTE_1BIT

const unsigned short hPixels = 640; //Number of horizontal pixels in the targeted VGA mode
const unsigned short vPixels = 480; //Number of vertical pixels in the targeted VGA mode
const unsigned char cols = 24; //Number of columns/bytes horizontally supported by the current display mode
const unsigned char rows = 240; //Number of rows vertically supported by the current display mode

//NOTE: The following frame buffer maps directly to the frame buffer displayed
const unsigned char frameBuffer[rows][cols] PROGMEM = {\n`; //Start the frame buffer multi dimensional array

function init() {
    //Add onclick to monochromize button
    buttonContainer.children[1].addEventListener("click", () => {
        const frameBuffer = ctx.getImageData(0, 0, canvas.width, canvas.height);
        for (let row = 0; row < frameBuffer.height; row++) {
            let rowArr = "    {"; //Start a new array for current row

            for (let col = 0; col < frameBuffer.width; col+=8) {
                let arrElementBin = ""; //Start a new 8bit binary string for current column

                for (let bit = col; bit < col+8; bit++) {
                    //Calculate Channel0=R index for current pixel
                    const r = row * (frameBuffer.width * 4) + bit * 4;
                    const avg = (frameBuffer.data[r] + frameBuffer.data[r + 1] + frameBuffer.data[r + 2]) / 3;
                    if (avg > 125) {
                        arrElementBin += "1";
                        frameBuffer.data[r] = 255;
                        frameBuffer.data[r + 1] = 255;
                        frameBuffer.data[r + 2] = 255;
                    } else {
                        arrElementBin += "0";
                        frameBuffer.data[r] = 0;
                        frameBuffer.data[r + 1] = 0;
                        frameBuffer.data[r + 2] = 0;
                    }
                }
                
                const arrElementHex = parseInt(arrElementBin, 2).toString(16).toUpperCase(); //Parse the binary string as hex with uppercase
                rowArr += "0x" + (arrElementHex.length == 1 ? "0" + arrElementHex : arrElementHex) + ","; //Make the hex always 2 digit //Insert the hex byte as the next element in the rowStr array
            }

            frameBufferArr += rowArr.slice(0, -1) + "},\n"; //Remove the trailing comma in the last element //close the array
        }

        frameBufferArr = frameBufferArr.slice(0, -2) + "\n};</pre>"; //Remove the trailing comma in the last array //Close the multi dimensional array
        ctx.putImageData(frameBuffer, 0, 0); //Update canvas
    });

    //Add onclick to export button
    buttonContainer.children[2].addEventListener("click", () => {
        const newWindow = window.open("", fileInput.files[0].name);
        newWindow.document.body.innerHTML = frameBufferArr;
    });
}